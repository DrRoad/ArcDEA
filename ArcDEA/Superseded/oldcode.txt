//#region Download fmask data to temporary folder
//// Set progressor
//RefreshProgressBar(1, items.Count, "Downloading fmask data...", false);

//// Download fmask geotiffs to temporary folder
//int i = 0;
//await QueuedTask.Run(() => Parallel.ForEachAsync(items, paraDownloadOptions, async (item, token) =>
//{
//    using (var response = await client.GetAsync(item.MaskWcsUrl))
//    {
//        response.EnsureSuccessStatusCode(); // TODO: handle exception

//        string filepath = Path.Join(tmpFolder, item.MaskFilename);
//        using (FileStream fs = new FileStream(filepath, FileMode.CreateNew))
//        {
//            await response.Content.CopyToAsync(fs);  // TODO: handle exception
//        }
//    }

//    // Increment progress 
//    i = i + 1;
//    if (i % 5 == 0)
//    {
//        progressValue.Report(i);
//        progressPercent.Report($"{Convert.ToInt32(i / MaxProgressValue * 100)}%");
//    }
//}));
//#endregion

//#region Check and remove fmask data for invalid scenes
//// Set progressor
//RefreshProgressBar(1, items.Count, "Removing invalid data via fmask...", false);
//ProgressPercentage = "";

//// Establish connection to temporary folder
//Uri folderUri = new Uri(tmpFolder);
//FileSystemConnectionPath tmpConn = new FileSystemConnectionPath(folderUri, FileSystemDatastoreType.Raster);

//i = 0;
//await QueuedTask.Run(() => Parallel.ForEach(items, paraProcessingOptions, (item, token) =>
//{
//    // New data store connection
//    FileSystemDatastore store = new FileSystemDatastore(tmpConn);

//    // Read raster from store
//    RasterDataset rasterDataset = store.OpenDataset<RasterDataset>(item.MaskFilename);
//    Raster raster = rasterDataset.CreateFullRaster();

//    // Get distinct pixel value counts for raster
//    Dictionary<string, double> percents = Data.GetPercentValidPixels(raster, validClasses);

//    // Flag image as invalid if all overlap or < min valid threshold
//    item.Valid = true;
//    if (percents["pctOverlap"] == 1 || percents["pctValid"] < minValid)
//    {
//        item.Valid = false;
//    }

//    // TODO: Delete image for current item
//    //

//    // Increment progress 
//    i = i + 1;
//    if (i % 5 == 0)
//    {
//        progressValue.Report(i);
//        progressPercent.Report($"{Convert.ToInt32(i / MaxProgressValue * 100)}%");
//    }
//}));

//// Remove invalid dates
//items = items.Where(e => e.Valid == true).ToList();
//#endregion

//#region Download valid data to temporary folder
//// Set progressor
//RefreshProgressBar(1, items.Count, "Downloading satellite data...", false);
//ProgressPercentage = "";

//// Download satellite geotiffs to temporary folder
//i = 0;
//await QueuedTask.Run(() => Parallel.ForEachAsync(items, paraDownloadOptions, async (item, token) =>
//{
//    using (var response = await client.GetAsync(item.FullWcsUrl))
//    {
//        response.EnsureSuccessStatusCode(); // TODO: handle exception

//        string filepath = Path.Join(tmpFolder, item.FullFilename);
//        using (FileStream fs = new FileStream(filepath, FileMode.CreateNew))
//        {
//            await response.Content.CopyToAsync(fs);  // TODO: handle exception
//        }
//    }

//    // Increment progress
//    i = i + 1;
//    progressValue.Report(i);
//    progressPercent.Report($"{Convert.ToInt32(i / MaxProgressValue * 100)}%");
//}));
//#endregion


#############################################################

// Set current item validity to false until proven otherwise
item.Valid = false;

// Download mask geotiff and calculate percent valid and overlap.
// Flag image as valid if not all overlap pixels or >= min valid threshold
// Returns null if error.Will retry several times until max retries reached.
for (int j = 0; j < numRetries; j++)
{
    Dictionary<string, float> result = item.DownloadAndCheckMaskValidity(validClasses, client);
    if (result != null)
    {
        if (result["pctOverlap"] < 1.0 && result["pctValid"] >= minValid)
        {
            item.Valid = true;
            break;
        }
    }
}

// Increment progress 
i = i + 1;
if (i % 5 == 0)
{
    progressValue.Report(i);
    progressPercent.Report($"{Convert.ToInt32(i / MaxProgressValue * 100)}%");
}


#############################################################


int i = 0;
var tasks = new List<Task>();
foreach (var item in items)
{
    tasks.Add(Task.Run(() =>
    {
        try
        {
            using (OSGeo.GDAL.Dataset ds = OSGeo.GDAL.Gdal.Open(item.MaskWcsUrl, OSGeo.GDAL.Access.GA_ReadOnly))
            {
                int width = ds.RasterXSize;
                int height = ds.RasterYSize;
                int size = width * height;

                OSGeo.GDAL.Band band = ds.GetRasterBand(1);

                Int16[] bits = new Int16[size];
                band.ReadRaster(0, 0, width, height, bits, width, height, 0, 0);

                var currentCounts = bits.GroupBy(e => e).Select(x => new { Key = x.Key, Value = x.Count() });

                float numValid = currentCounts.Where(e => validClasses.Contains(e.Key)).Sum(e => e.Value);
                float numOverlap = currentCounts.Where(e => e.Key == 0).Sum(e => e.Value);
                float numTotal = bits.Length;

                float pctValid = numValid / (numTotal - numOverlap);
                float pctOverlap = numOverlap / numTotal;

                // Construct output result
                var result = new Dictionary<string, float>()
                {
                    {"pctValid", pctValid >= 0 ? pctValid : 0},
                    {"pctOverlap", pctOverlap >= 0 ? pctOverlap : 0},
                };

                Debug.WriteLine($"Success on {item.Id}");
                item.Valid = true;
            };
        }
        catch
        {
            Debug.WriteLine($"Error on {item.Id}");
            item.Valid = false;
        }

        // Increment progress 
        i = i + 1;
        if (i % 5 == 0)
        {
            progressValue.Report(i);
            progressPercent.Report($"{Convert.ToInt32(i / MaxProgressValue * 100)}%");
        }
    }));
}

var timer = new Stopwatch();
timer.Start();

await Task.WhenAll(tasks);

timer.Stop();
var duration = timer.Elapsed;
return;


###########################################################
this one keeps ui and allows for num cores, but takes 3x longr than task.whenall
int i = 0;
await QueuedTask.Run(() => Parallel.ForEachAsync(items, paraDownloadOptions, async (item, token) =>
{
    await Task.Run(() =>
    {
    try
    {
        using (OSGeo.GDAL.Dataset ds = OSGeo.GDAL.Gdal.Open(item.MaskWcsUrl, OSGeo.GDAL.Access.GA_ReadOnly))
        {
            int width = ds.RasterXSize;
            int height = ds.RasterYSize;
            int size = width * height;

            OSGeo.GDAL.Band band = ds.GetRasterBand(1);

            Int16[] bits = new Int16[size];
            band.ReadRaster(0, 0, width, height, bits, width, height, 0, 0);

            var currentCounts = bits.GroupBy(e => e).Select(x => new { Key = x.Key, Value = x.Count() });

            float numValid = currentCounts.Where(e => validClasses.Contains(e.Key)).Sum(e => e.Value);
            float numOverlap = currentCounts.Where(e => e.Key == 0).Sum(e => e.Value);
            float numTotal = bits.Length;

            float pctValid = numValid / (numTotal - numOverlap);
            float pctOverlap = numOverlap / numTotal;

            // Construct output result
            var result = new Dictionary<string, float>()
            {
                { "pctValid", pctValid >= 0 ? pctValid : 0 },
                { "pctOverlap", pctOverlap >= 0 ? pctOverlap : 0 },
            };

            Debug.WriteLine($"Success on {item.Id}");
            item.Valid = true;
        };
    }
    catch
    {
        Debug.WriteLine($"Error on {item.Id}");
        item.Valid = false;
    }

    });

    // Increment progress 
    i = i + 1;
    if (i % 5 == 0)
    {
        progressValue.Report(i);
        progressPercent.Report($"{Convert.ToInt32(i / MaxProgressValue * 100)}%");
    }
}));


timer.Stop();
var duration = timer.Elapsed;
return;



//#region Set invalid pixels to NoData and write to final output folder
//// Set progressor
//RefreshProgressBar(1, items.Count, "Processing satellite data...", false);
//ProgressPercentage = "";

//// Establish connection to final output folder
//Uri outputUri = new Uri(outputFolder);
//FileSystemConnectionPath outConn = new FileSystemConnectionPath(outputUri, FileSystemDatastoreType.Raster);

//i = 0;
//await QueuedTask.Run(() => Parallel.ForEachAsync(items, paraProcessingOptions, async (item, token) =>
//{
//    // Open store to temp folder then open raster
//    var store = new FileSystemDatastore(tmpConn);
//    var rasterDs = store.OpenDataset<RasterDataset>(item.FullFilename);
//    var raster = rasterDs.CreateFullRaster();


//    // TODO: testing
//    //Raster indexRaster = rasterDs.CreateRaster(new List<int> { 0 });
//    //var indexRaster = Data.CalculateIndex(raster, rasterDs, "ndvi");
//    //var idxStore = new FileSystemDatastore(outConn);
//    //indexRaster.SaveAs("_mask_" + item.FinalFilename, idxStore, "TIFF");


//    // Using mask band, set all pixel values to nodata where invalid
//    int maskIndex = rasterDs.GetBandIndex("oa_fmask");
//    raster = Data.MaskRasterInvalidPixels(raster, maskIndex, validClasses, noDataValue);

//    // Set store to output folder and save processed raster
//    var outStore = new FileSystemDatastore(outConn);
//    raster.SaveAs("_" + item.FinalFilename, outStore, "TIFF");


//    // TODO: drop oa_fmask band
//    // TODO: Delete image for current item

//    // Increment progress 
//    i = i + 1;
//    if (i % 5 == 0)
//    {
//        progressValue.Report(i);
//        progressPercent.Report($"{Convert.ToInt32(i / MaxProgressValue * 100)}%");
//    }
//}));
//#endregion


//
var roots = root.Features.Select(e => e.Assets["nbart_red"].Href).ToList();
MaxProgressValue = roots.Count;
int j = 0;
await QueuedTask.Run(() => Parallel.ForEachAsync(roots, numCores, async (item, token) =>
{
    await Task.Run(() => { 
        Debug.WriteLine($"Working on {item}");

        string url = item.Remove(0, 5);
        url = "/vsis3_streaming/" + url;

        var watch = new Stopwatch();
        watch.Start();

        OSGeo.GDAL.Dataset dataset = OSGeo.GDAL.Gdal.Open(url, OSGeo.GDAL.Access.GA_ReadOnly);
        OSGeo.GDAL.Band band = dataset.GetRasterBand(1);

        int width = band.XSize;
        int height = band.YSize;
        int size = width * height;

        // Read pixel values into "block" array
        Int16[] bits = new Int16[size];
        band.ReadRaster(0, 0, width, height, bits, width, height, 0, 0);

        watch.Stop();
        var duration = watch.Elapsed;

        Debug.WriteLine($"Took: {duration.ToString()}");
    });

    // Increment progress 
    j = j + 1;
    if (j % 5 == 0)
    {
        progressValue.Report(j);
        progressPercent.Report($"{Convert.ToInt32(j / MaxProgressValue * 100)}%");
    }
}));

public async Task<int> DownloadMaskAsync(string folder, HttpClient client)
{
    // Put this in viewmodel end
    //await QueuedTask.Run(async () =>
    //{
    //    List<Task<int>> masks = items.Select(e => e.DownloadMaskAsync(tmpFolder, client)).ToList();
    //    while (masks.Any())
    //    {
    //        // Get next task when available
    //        Task<int> finished = await Task.WhenAny(masks);
    //        masks.Remove(finished);

    //        // Download mask geotiff
    //        i += await finished;

    //        // Increment progressor
    //        await Task.Delay(100);
    //        progressValue.Report(i);
    //        progressPercent.Report($"({Math.Round(i / MaxProgressValue * 100, 2)}%)");
    //    }
    //});

    string filepath = Path.Join(folder, MaskFilename);

    using (var response = await client.GetAsync(MaskWcsUrl))
    {
        response.EnsureSuccessStatusCode();

        using (FileStream fs = new FileStream(filepath, FileMode.CreateNew))
        {
            await response.Content.CopyToAsync(fs);
            return 1;
        }
    };
}

public async Task<int> DownloadFullAsync(string folder, HttpClient client)
{
    // Put this in viewmodel
    //i = 0;
    //await QueuedTask.Run(async () =>
    //{
    //    List<Task<int>> fulls = items.Select(e => e.DownloadFullAsync(tmpFolder, client)).ToList();
    //    while (fulls.Any())
    //    {
    //        // Get next task when available
    //        Task<int> finish = await Task.WhenAny(fulls);
    //        fulls.Remove(finish);

    //        // Download full geotiff task
    //        i += await finish;

    //        // Increment progressor
    //        await Task.Delay(100);
    //        progressValue.Report(i);
    //        progressPercent.Report($"({Math.Round(i / MaxProgressValue * 100, 2)}%)");
    //    }
    //});

    string filepath = Path.Join(folder, FullFilename);

    using (var response = await client.GetAsync(FullWcsUrl))
    {
        response.EnsureSuccessStatusCode();

        using (FileStream fs = new FileStream(filepath, FileMode.CreateNew))
        {
            await response.Content.CopyToAsync(fs);
            return 1;
        }
    };
}

public async Task Test(string index, string outputFolder, List<int> validPixels, Int16 noDataValue, HttpClient client)
{
    await Task.Run(() =>
    {
        try
        {
            // Create full output path and filename
            //string outputFile = Path.Combine(outputFolder, FinalFilename);

            // Download and read WCS full source raster (including mask band)
            //OSGeo.GDAL.Dataset sourceDS = OSGeo.GDAL.Gdal.Open(FullWcsUrl, OSGeo.GDAL.Access.GA_ReadOnly);

            //OSGeo.GDAL.Driver driver = OSGeo.GDAL.Gdal.GetDriverByName("VRT");

            //OSGeo.GDAL.Dataset dataset = OSGeo.GDAL.Gdal.OpenShared(FullWcsUrl, OSGeo.GDAL.Access.GA_ReadOnly);

            //OSGeo.GDAL.Dataset vrt = driver.CreateCopy(@"C:\Users\262272G\Desktop\out.vrt", dataset, 0, null, null, null);

            //OSGeo.GDAL.Dataset vrt = driver.CreateCopy("", dataset, 0, null, null, null);
            //string xmlvrt = vrt.GetMetadata("xml:VRT")[0];

            //OSGeo.GDAL.Dataset vrt = driver.CreateCopy("", dataset, 0, null, null, null);
            //vrt.SetMetadataItem("SourceDate", "July 21, 2003", "");
            //vrt.GetRasterBand(1)->SetMetadataItem("HideNoDataValue", "1", "");
            //vrt.GetRasterBand(1).SetNoDataValue(-999.0);
            //OSGeo.GDAL.Driver geoTiffdriver = OSGeo.GDAL.Gdal.GetDriverByName("GTiff");
            //OSGeo.GDAL.Dataset geoTiffdataset = geoTiffdriver.CreateCopy("vrt.tif", vrt, 0, null, null, null);
            //geoTiffdataset.FlushCache();
            //geoTiffdataset.Dispose();

            //OSGeo.GDAL.Dataset vrt = driver.CreateCopy("", dataset, 0, null, null, null);
            //vrt.AddBand(OSGeo.GDAL.DataType.GDT_CFloat32, null);


            int z = 0;

        }
        catch (Exception ex)
        {
            int t = 0;
        }

        // Take a breath...
        Task.Delay(100);
    });
}


//OSGeo.GDAL.Gdal.SetConfigOption("AWS_NO_SIGN_REQUEST", "YES");
//OSGeo.GDAL.Gdal.SetConfigOption("VSI_CACHE", "TRUE");
//OSGeo.GDAL.Gdal.SetConfigOption("VSI_CACHE_SIZE ", Math.Pow(10, 9).ToString());
//OSGeo.GDAL.Gdal.SetConfigOption("GDAL_DISABLE_READDIR_ON_OPEN", "EMPTY_DIR");

#region tabs (to be finished)
// TODO: finish this
// https://github.com/Esri/arcgis-pro-sdk-community-samples/tree/master/Framework/CustomCatalog
// DockPanel with header and a stackpanel binding to panel1, panel2
// in dockpanel with header vm, set current page to panel based on tab clicked
// panels are defined in a folder seperately as one xaml and cs each.
private List<TabControl> _primaryMenuList = new List<TabControl>();
public List<TabControl> PrimaryMenuList
{
    get { return _primaryMenuList; }
}
private int _selectedPanelHeaderIndex = 0;
public int SelectedPanelHeaderIndex
{
    get { return _selectedPanelHeaderIndex; }
    set
    {
        SetProperty(ref _selectedPanelHeaderIndex, value, () => SelectedPanelHeaderIndex);
        //if (_selectedPanelHeaderIndex == 0)
            //CurrentPage = _paneH1VM;
        //if (_selectedPanelHeaderIndex == 1)
            //CurrentPage = _paneH2VM;
    }
}
//private PanelViewModelBase _currentPage;
//public PanelViewModelBase CurrentPage
//{
//    get { return _currentPage; }
//    set
//    {
//        SetProperty(ref _currentPage, value, () => CurrentPage);
//    }
//}
#endregion



// Initialise dockpanel tabs
PrimaryMenuList.Add(new TabControl() { Text = "Landsat", Tooltip = "Landsat Products" });
PrimaryMenuList.Add(new TabControl() { Text = "Sentinel", Tooltip = "Sentinel Products" });




//using System;
//using System.Collections.Generic;
//using System.IO;
//using System.Linq;
//using System.Net.Http;
//using ArcGIS.Desktop.Framework.Threading.Tasks;
//using System.Text.Json;
//using System.Text.Json.Serialization;
//using System.Threading.Tasks;
//using ArcGIS.Core.Data.Raster;
//using ArcGIS.Core.Data;
//using ArcGIS.Core.Threading.Tasks;

//namespace ArcDEA.Classes
//{
//    public class Stac
//    {
//        public string QueryEndpoint { get; set; }
//        public string QueryCollection { get; set; }
//        public string QueryStartDate { get; set; }
//        public string QueryEndDate { get; set; }
//        public double[] QueryBoundingBoxWgs84 { get; set; }
//        public double[] QueryBoundingBoxAlbers { get; set; }
//        public int QueryLimit { get; set; }
//        public Root Result { get; set; }
//        public Dictionary<string, string[]> Wcs { get; set; }

//        public Stac(string collection, string startDate, string endDate, double[] boundingBoxWgs84, double[] boundingBoxAlbers, int limit)
//        {
//            QueryEndpoint = "https://explorer.sandbox.dea.ga.gov.au/stac/search?";
//            QueryCollection = collection;
//            QueryStartDate = startDate;
//            QueryEndDate = endDate;
//            QueryBoundingBoxWgs84 = boundingBoxWgs84;
//            QueryBoundingBoxAlbers = boundingBoxAlbers;
//            QueryLimit = limit;
//            Result = null;
//            Wcs = null;
//        }

//        public async Task QueryStacAsync(int timeout)
//        {
//            // Convert bounding box array into double array sw, ne
//            string bbox = string.Join(",", QueryBoundingBoxWgs84);

//            // Construct STAC query url
//            string url = QueryEndpoint;
//            url += $"collection={QueryCollection}";
//            url += $"&time={QueryStartDate}/{QueryEndDate}";
//            url += $"&bbox=[{bbox}]";
//            url += $"&limit={QueryLimit}";

//            // Prepare http client
//            var client = new HttpClient();
//            client.Timeout = TimeSpan.FromMinutes(timeout);

//            // TODO: try catches

//            // Recursively parse all STAC features based on user request
//            bool more = true;
//            while (more)
//            {
//                // Get initial list of STAC results for user request
//                var response = await QueuedTask.Run(() => { return client.GetAsync(url); });
//                response.EnsureSuccessStatusCode();

//                // Parse content and deserialize json into STAC class
//                var content = await QueuedTask.Run(() => { return response.Content.ReadAsStringAsync(); });
//                Root data = JsonSerializer.Deserialize<Root>(content);

//                // On first pass just add, on others, append
//                if (Result == null)
//                {
//                    Result = data;
//                }
//                else
//                {
//                    Result.Features.AddRange(data.Features);
//                }

//                // Check if a "next" link exists, iterate and append, else leave
//                var next = data.Links.Where(e => e.Relative == "next").FirstOrDefault();
//                if (next != null)
//                {
//                    url = next.Href;
//                }
//                else
//                {
//                    more = false;
//                }
//            }
//        }

//        public void GroupBySolarDay()
//        {
//            // Sort by datetime
//            Result.Features.Sort((a, b) => a.Properties.DateTime.CompareTo(b.Properties.DateTime));

//            // Group by date (without time) and select first date in each group
//            List<Feature> groupedFeatures = Result.Features.GroupBy(e => e.Properties.DateTime.ToString("yyyy-MM-dd")).Select(e => e.First()).ToList();
//            Result.Features = groupedFeatures;
        
//        }

//        public async Task DropInvalidFeaturesAsync(List<int> validClasses, double minValid)
//        {
//            // TODO: check inputs
//            // TODO: group by solar day functonality
//            // TODO: move wcs code out to helpers, we use it again elsewhere

//            // Set up dictionary to hold raw and clean date
//            Dictionary<string, string[]> items = new Dictionary<string, string[]>();

//            // Convert raw dates to STAC-friendly format
//            var dates = Result.Features.Select(e => e.Properties.DateTime.ToString("yyyy-MM-dd"));  //yyyy-MM-ddThh:mm:ss
//            dates = dates.Distinct().ToList();

//            // Get Albers bounding box
//            string bbox = string.Join(",", QueryBoundingBoxAlbers);

//            foreach (string date in dates)
//            {
//                // Create WCS query url
//                string url = "";
//                url += "https://ows.dea.ga.gov.au/wcs?service=WCS";
//                url += "&VERSION=1.0.0";
//                url += "&REQUEST=GetCoverage";
//                url += "&COVERAGE=ga_ls8c_ard_3";
//                url += "&TIME=" + date;
//                url += "&MEASUREMENTS=oa_fmask";
//                url += "&BBOX=" + bbox;
//                url += "&CRS=EPSG:3577";
//                url += "&RESX=30.0";
//                url += "&RESY=30.0";
//                url += "&FORMAT=GeoTIFF";

//                // Create new item data structure (url, filename) and add
//                string[] item = new string[] {url, null};
//                items.Add(date, item);
//            }

//            // Get the current temp folder path
//            string folder = Path.GetTempPath();

//            // Open a HTTP client with 60 minute timeout
//            var client = new HttpClient();
//            client.Timeout = TimeSpan.FromMinutes(60);

//            // Create a list of mask downloader tasks
//            var tasks = new List<Task>();
//            foreach (var item in items)
//            {
//                string date = item.Key;
//                string url = item.Value[0];

//                tasks.Add(Task.Run(async () => 
//                {
//                    // Notify
//                    System.Diagnostics.Debug.WriteLine($"Started download: {date}");

//                    // Create temporary file path and set Uri
//                    string filename = Guid.NewGuid().ToString() + ".tif";
//                    string filepath = Path.Join(folder, filename);

//                    // Query URL and ensure success
//                    var response = await client.GetAsync(url);
//                    response.EnsureSuccessStatusCode();

//                    // Download temporary file to temporary folder
//                    using (FileStream fs = new FileStream(filepath, FileMode.CreateNew))
//                    {
//                        await response.Content.CopyToAsync(fs);
//                    }

//                    // Update filename in current items
//                    item.Value[1] = filename;

//                    // Notify
//                    System.Diagnostics.Debug.WriteLine($"Finished download: {date}");
//                }));
//            }

//            // Run all download tasks
//            await Task.WhenAll(tasks);

//            // Iterate items, count percent valid pixels, return invalid dates, all on background threads
//            List<string> invalidDates = await BackgroundTask.Run(() => {

//                // todo make max degree parallel dynamic
//                ParallelOptions options = new ParallelOptions();
//                options.MaxDegreeOfParallelism = 3;  

//                List<string> invalidDates = new List<string>();
//                Parallel.ForEach(items, options, item => 
//                { 
//                    string date = item.Key;
//                    string url = item.Value[0];
//                    string filename = item.Value[1];
//                    string filepath = Path.Join(folder, filename);

//                    // Notify
//                    System.Diagnostics.Debug.WriteLine($"Started validity check: {date}");

//                    // Create connection to file
//                    Uri folderUri = new Uri(folder);
//                    FileSystemConnectionPath conn = new FileSystemConnectionPath(folderUri, FileSystemDatastoreType.Raster);
//                    FileSystemDatastore store = new FileSystemDatastore(conn);

//                    // Read raster from store
//                    RasterDataset rasterDataset = store.OpenDataset<RasterDataset>(filename);
//                    Raster raster = rasterDataset.CreateFullRaster();

//                    // Get a pixel block for quicker reading and read from pixel top left pixel
//                    PixelBlock block = raster.CreatePixelBlock(raster.GetWidth(), raster.GetHeight());
//                    raster.Read(0, 0, block);

//                    // Read 2-dimensional pixel values into 1-dimensional byte array
//                    Array pixels2D = block.GetPixelData(0, false);
//                    byte[] pixels1D = new byte[pixels2D.Length];
//                    Buffer.BlockCopy(pixels2D, 0, pixels1D, 0, pixels2D.Length);

//                    // Get distinct pixel values and their counts
//                    var uniqueCounts = pixels1D.GroupBy(e => e).Select(x => new { key = x.Key, val = x.Count() }).ToList();

//                    // Get the total of all pixels excluding unclassified (i.e., overlap boundary areas, or 0)
//                    double totalPixels = uniqueCounts.Where(e => e.key != 0).Sum(e => e.val);

//                    //Unclassified-> 0.
//                    //Clear-> 1.
//                    //Cloud-> 2.
//                    //Cloud Shadow -> 3.
//                    //Snow-> 4.
//                    //Water-> 5.

//                    // Calculate percentage of each fmask class



//                    // Count percentage of valid pixels and keep if > minimum allowed
//                    //double totalPixels = pixels2D.Length;
//                    double validPixels = pixels1D.Where(e => validClasses.Contains(e)).ToArray().Length;

//                    if ((validPixels / totalPixels) < minValid)
//                    {
//                        invalidDates.Add(date);
//                    }

//                    // TODO: Delete image for current item

//                    // Notify
//                    System.Diagnostics.Debug.WriteLine($"Ended validity check: {date}");
//                });

//                return invalidDates;
//            }, BackgroundProgressor.None);

//            // Remove any date from Result that are valid and sort ascending (inplace)
//            Result.Features.RemoveAll(e => invalidDates.Contains(e.Properties.DateTime.ToString("yyyy-MM-dd")));  //yyyy-MM-ddThh:mm:ss
//            Result.Features.Sort((a, b) => a.Properties.DateTime.CompareTo(b.Properties.DateTime));
//        }
    
//        public void GetWcs(List<string> assetNames)
//        {
//            // TODO: check inputs
//            // TODO: check Result items
//            // TODO: move this code to helpers, reference that
//            // TODO: implement group by solar day

//            // Set up dictionary to hold raw and clean date
//            Wcs = new Dictionary<string, string[]>();

//            // Convert assetNames to comma-seperated string
//            string assets = string.Join(",", assetNames);

//            // Convert raw dates to WCS-friendly format
//            var dates = Result.Features.Select(e => e.Properties.DateTime.ToString("yyyy-MM-dd"));  //yyyy-MM-ddThh:mm:ss
//            dates = dates.Distinct().ToList();

//            // Get Albers bounding box
//            string bbox = string.Join(",", QueryBoundingBoxAlbers);

//            foreach (string date in dates)
//            {
//                // Create WCS query url
//                string url = "";
//                url += "https://ows.dea.ga.gov.au/wcs?service=WCS";
//                url += "&VERSION=1.0.0";
//                url += "&REQUEST=GetCoverage";
//                url += "&COVERAGE=ga_ls8c_ard_3";
//                url += "&TIME=" + date;
//                url += "&MEASUREMENTS=" + assets;
//                url += "&BBOX=" + bbox;
//                url += "&CRS=EPSG:3577";
//                url += "&RESX=30.0";
//                url += "&RESY=30.0";
//                url += "&FORMAT=GeoTIFF";

//                // Prepare filename
//                string filename = date.Replace("-", "").Replace(":", "") + ".tif";

//                // Create new item data structure (url, filename) and add
//                string[] item = new string[] { url, filename };
//                Wcs.Add(date, item); 
//            }
//        }
//    }

//    public class Root
//    {
//        [JsonPropertyName("type")]
//        public string Type { get; set; }

//        [JsonPropertyName("features")]
//        public List<Feature> Features { get; set; }

//        [JsonPropertyName("links")]
//        public List<Link> Links { get; set; }

//        [JsonPropertyName("numberReturned")]
//        public int ReturnedCount { get; set; }

//        [JsonPropertyName("context")]
//        public Context Context { get; set; }

//        [JsonPropertyName("numberMatched")]
//        public int MatchedCount { get; set; }

//        [JsonPropertyName("stac_version")]
//        public string StacVersion { get; set; }
    
//    }

//    public class Context
//    {
//        [JsonPropertyName("page")]
//        public int Page { get; set; }

//        [JsonPropertyName("returned")]
//        public int Returned { get; set; }

//        [JsonPropertyName("matched")]
//        public int Matched { get; set; }

//        [JsonPropertyName("limit")]
//        public int Limit { get; set; }
//    }

//    public class Feature
//    {
//        [JsonPropertyName("id")]
//        public string Id { get; set; }

//        [JsonPropertyName("type")]
//        public string Type { get; set; }

//        [JsonPropertyName("properties")]
//        public Properties Properties { get; set; }

//        [JsonPropertyName("geometry")]
//        public Geometry Geometry { get; set; }

//        [JsonPropertyName("assets")]
//        public Dictionary<string, Asset> Assets { get; set; }

//        [JsonPropertyName("stac_version")]
//        public string StacVersion { get; set; }
//    }

//    public class Asset
//    {
//        [JsonPropertyName("title")]
//        public string Title { get; set; }

//        [JsonPropertyName("href")]
//        public string Href { get; set; }

//        [JsonPropertyName("type")]
//        public string Type { get; set; }

//        [JsonPropertyName("proj:epsg")]
//        public int Epsg { get; set; }

//        [JsonPropertyName("proj:shape")]
//        public int[] Shape { get; set; }

//        [JsonPropertyName("proj:transform")]
//        public float[] Transform { get; set; }

//        [JsonPropertyName("roles")]
//        public string[] Roles { get; set; }
//    }

//    public class Properties
//    {
//        [JsonPropertyName("title")]
//        public string Title { get; set; }

//        [JsonPropertyName("datetime")]
//        public DateTime DateTime { get; set; }

//        [JsonPropertyName("proj:epsg")]
//        public int Epsg { get; set; }
        
//        [JsonPropertyName("proj:shape")]
//        public int[] Shape { get; set; }
        
//        [JsonPropertyName("proj:transform")]
//        public float[] Transform { get; set; }
        
//        [JsonPropertyName("platform")]
//        public string Platform { get; set; }
        
//        [JsonPropertyName("odc:product")]
//        public string Product { get; set; }
        
//        [JsonPropertyName("odc:producer")]
//        public string Producer { get; set; }
        
//        [JsonPropertyName("odc:product_family")]
//        public string ProductFamily { get; set; }
        
//        [JsonPropertyName("odc:dataset_version")]
//        public string DatasetVersion { get; set; }
        
//        [JsonPropertyName("dea:dataset_maturity")]
//        public string DatasetMaturity { get; set; }
        
//        [JsonPropertyName("instruments")]
//        public string[] Instruments { get; set; }
        
//        [JsonPropertyName("eo:cloud_cover")]
//        public float CloudCover { get; set; }
        
//        [JsonPropertyName("view:sun_azimuth")]
//        public float SunAzimuth { get; set; }
        
//        [JsonPropertyName("view:sun_elevation")]
//        public float SunElevation { get; set; }
        
//        [JsonPropertyName("odc:region_code")]
//        public string RegionCode { get; set; }
        
//        [JsonPropertyName("odc:file_format")]
//        public string FileFormat { get; set; }
        
//        [JsonPropertyName("landsat:landsat_scene_id")]
//        public string LandsatSceneId { get; set; }

//        [JsonPropertyName("landsat:wrs_row")]
//        public int LandsatWrsRow { get; set; }

//        [JsonPropertyName("landsat:wrs_path")]
//        public int LandsatWrsPath { get; set; }

//        [JsonPropertyName("landsat:collection_number")]
//        public int LandsatCollectionNumber { get; set; }

//        [JsonPropertyName("landsat:landsat_product_id")]
//        public string LandsatProductId { get; set; }

//        [JsonPropertyName("landsat:collection_category")]
//        public string LandsatCollectionCategory { get; set; }
//    }

//    public class Geometry
//    {
//        [JsonPropertyName("coordinates")]
//        public float[][][] Coordinates { get; set; }

//        [JsonPropertyName("type")]
//        public string Type { get; set; }
//    }

//    public class Link
//    {
//        [JsonPropertyName("href")]
//        public string Href { get; set; }

//        [JsonPropertyName("rel")]
//        public string Relative { get; set; }

//        [JsonPropertyName("title")]
//        public string Title { get; set; }

//        [JsonPropertyName("type")]
//        public string Type { get; set; }

//        [JsonPropertyName("method")]
//        public string Method { get; set; }
//    }
//}


//await QueuedTask.Run(() =>
//{
    //ApplicationOptions.GeoprocessingOptions.SetAddOutputDatasetsToOpenMap(false);
//});


var currentGDBPath = Project.Current.DefaultGeodatabasePath;
var newGDBMosaic = "ArcDEA";
var mosaicCRS = 3577;

// Create new ArcDEA mosaic dataset
var args = Geoprocessing.MakeValueArray(currentGDBPath, newGDBMosaic, mosaicCRS, null, null, "None", null);
var result = await Geoprocessing.ExecuteToolAsync("management.CreateMosaicDataset", args);

var currentGDBMosaicDataset = result.ReturnValue;

args = Geoprocessing.MakeValueArray(currentGDBMosaicDataset, "Raster Dataset", @"C:\Users\Lewis\Desktop\ls4", "UPDATE_CELL_SIZES", "UPDATE_BOUNDARY", "NO_OVERVIEWS", null, 0, 1500, null, null, "SUBFOLDERS", "EXCLUDE_DUPLICATES", "BUILD_PYRAMIDS", "CALCULATE_STATISTICS", "NO_THUMBNAILS", null, "NO_FORCE_SPATIAL_REFERENCE", "ESTIMATE_STATISTICS", null, "NO_PIXEL_CACHE");
result = await Geoprocessing.ExecuteToolAsync("management.AddRastersToMosaicDataset", args);

//arcpy.management.CalculateField("ArcDEA", "ProductName", '"Landsat Multiband"', "PYTHON3", '', "TEXT", "NO_ENFORCE_DOMAINS")
//args = Geoprocessing.MakeValueArray(currentGDBMosaicDataset, "ProductName", @"'Landsat Multiband'", "PYTHON3", null, "TEXT", "NO_ENFORCE_DOMAINS");
//result = await Geoprocessing.ExecuteToolAsync("management.CalculateField", args);



// define mosaic no data geoprocessor with coimposite nodatavalue option checked will set all band pixels to nodata where band (mask) has speicific values!


// add field to footprint via mosaic



using GDALTestEnvironment;
using OSGeo.GDAL;
using OSGeo.OGR;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Net;
using System.Text.Json;
using static System.Net.Mime.MediaTypeNames;
using static System.Net.WebRequestMethods;

Console.WriteLine("Starting app!");

GdalConfiguration.ConfigureGdal();
GdalConfiguration.ConfigureOgr();


// Set optimal GDAL configurations
OSGeo.GDAL.Gdal.SetConfigOption("GDAL_HTTP_UNSAFESSL", "YES");
OSGeo.GDAL.Gdal.SetConfigOption("CPL_VSIL_CURL_ALLOWED_EXTENSIONS", "tif");
OSGeo.GDAL.Gdal.SetConfigOption("GDAL_HTTP_MULTIRANGE", "YES");
OSGeo.GDAL.Gdal.SetConfigOption("GDAL_HTTP_MERGE_CONSECUTIVE_RANGES", "YES");

// Create WCS query url (without assets)
//string url = "";
//url += "https://ows.dea.ga.gov.au/wcs?service=WCS";
//url += "&VERSION=1.0.0";
//url += "&REQUEST=GetCoverage";
//url += "&COVERAGE=" + collection;
//url += "&TIME=" + date;
//url += "&MEASUREMENTS={*}";
//url += "&BBOX=" + bbox;
//url += "&CRS=" + epsg;
//url += "&RESX=" + resolution;
//url += "&RESY=" + resolution;

var client = new HttpClient();

string url = "";
url += "https://ows.dea.ga.gov.au/wms?service=WMS";
url += "&VERSION=1.3.0";
url += "&REQUEST=GetMap";
url += "&LAYERS=" + "ga_ls8c_ard_3";
url += "&TIME=" + "2015-01-04";
//url += "&MEASUREMENTS={*}";
url += "&BBOX=" + "-31.960002,115.823463,-31.947264,115.856662";
url += "&CRS=" + "EPSG:4326";
//url += "&RESX=" + 30;
//url += "&RESY=" + 30;
url += "&WIDTH=" + "500";
url += "&HEIGHT=" + "450";
url += "&FORMAT=image/png";
url += "&STYLES=";
url += "&DPI=72";



//string url = "https://ows.dea.ga.gov.au/wms?service=WMS&VERSION=1.3.0&REQUEST=GetMap&LAYERS=ga_ls8c_ard_3&crs=EPSG:4326&format=image/png&type=wmst&allowTemporalUpdates=true&enableTime=true";

//using (OSGeo.GDAL.Dataset inDS = OSGeo.GDAL.Gdal.Open(url, OSGeo.GDAL.Access.GA_ReadOnly))
//{
//int width = inDS.RasterXSize;
//int height = inDS.RasterYSize;
//int size = width * height;
//}
//Image img = new Image();

var stream = await client.GetStreamAsync(url);
var image = System.Drawing.Image.FromStream(stream);

image.Save(@"C:\Users\Lewis\Desktop\ls2\test.png");


//Image img = new System.Drawing.Image();


//using (var response = await client.GetAsync(url))
//{
//    response.EnsureSuccessStatusCode();

//    using (var inputStream = await response.Content.ReadAsInputStreamAsync())
//    {
//        bitmapImage.SetSource(inputStream.AsStreamForRead());
//    }
//}


//var tif = @"C:\Users\Lewis\Desktop\ls1\2022-01-16.tif";

//using (OSGeo.GDAL.Dataset inDS = OSGeo.GDAL.Gdal.Open(tif, OSGeo.GDAL.Access.GA_ReadOnly))
//{
//    // Get required dataset dimensions (all bands will be uniform)
//    int width = inDS.RasterXSize;
//    int height = inDS.RasterYSize;
//    int size = width * height;

//    var drv = OSGeo.GDAL.Gdal.GetDriverByName("NetCDF");

//    // Setup translate options, perform translate to subset bands, export as GeoTiff
//    OSGeo.GDAL.GDALTranslateOptions options = new OSGeo.GDAL.GDALTranslateOptions(
//        new[] 
//        { 
//            "-of", "netCDF",


//        });
//    OSGeo.GDAL.Gdal.wrapper_GDALTranslate(@"C:\Users\Lewis\Desktop\gribs\2021-1-13.nc", inDS, options, null, null);


//    int i = 0;


//}